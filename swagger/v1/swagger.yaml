---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/reservations/user/{id}":
    post:
      summary: creates a reservation
      tags:
      - Create a reservation
      parameters:
      - name: id
        in: path
        type: string
        schema:
          type: object
          properties:
            city:
              type: string
            duration_of_test_drive:
              type: integer
            date_of_reservation:
              type: string
            user_id:
              type: integer
            twowheeler_id:
              type: integer
          required:
          - city
          - duration_of_test_drive
          - date_of_reservation
          - user_id
          - twowheeler_id
        required: true
      responses:
        '201':
          description: reservation created
        '422':
          description: invalid request
  "/api/v1/twowheelers":
    post:
      summary: Creates a bike
      tags:
      - Create new bike
      parameters: []
      responses:
        '201':
          description: bike created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                image_url:
                  type: string
                price:
                  type: integer
                model_year:
                  type: integer
                engine_type:
                  type: string
                fuel_type:
                  type: string
              required:
              - name
              - description
              - image_url
              - price
  "/api/v1/twowheelers/{id}":
    get:
      summary: Retrieves bike details
      tags:
      - Get bike details
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Bike found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  image_url:
                    type: string
                  price:
                    type: string
                  model_year:
                    type: integer
                  engine_type:
                    type: string
                  fuel_type:
                    type: string
                required:
                - name
                - description
                - image_url
                - price
            application/xml:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  image_url:
                    type: string
                  price:
                    type: string
                  model_year:
                    type: integer
                  engine_type:
                    type: string
                  fuel_type:
                    type: string
                required:
                - name
                - description
                - image_url
                - price
        '404':
          description: bike not found
  "/api/v1/login":
    post:
      summary: Login a user
      tags:
      - Users
      parameters: []
      responses:
        '200':
          description: Login success
        '403':
          description: Login failure, User does not exist
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User name
              required:
              - name
  "/api/v1/register":
    post:
      summary: Register a user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: User is registered successfully
        '200':
          description: User already exists
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User name
              required:
              - name
  "/api/v1/reservations/{id}":
    get:
      summary: Get user reservations
      tags:
      - Users
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Reservation successfully found
        '404':
          description: User could not be found
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com
